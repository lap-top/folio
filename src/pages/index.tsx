import { type NextPage } from "next";
import Head from "next/head";
import Image from "next/image";
import Link from "next/link";
import Avatar from "../../public/avatar.png";
import { api } from "~/utils/api";
import { projects } from "~/utils/config";
import ProjectCard from "~/components/projectcard";
import type { SubmitHandler } from "react-hook-form";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { z } from "zod";
import { useState } from "react";

const validationSchema = z.object({
  email: z.string().min(1, { message: "Email is required" }).email({
    message: "Must be a valid email",
  }),
  message: z.string().min(5, { message: "Please provide an actual message." }),
});
type ValidationSchema = z.infer<typeof validationSchema>;

const Home: NextPage = () => {
  const scrollTo = (id: string) => {
    const element = document.getElementById(id);
    element?.scrollIntoView({
      behavior: "smooth",
      block: "center",
      inline: "center",
    });
  };
  const [copied, setCopied] = useState(false);
  const hello = api.example.hello.useQuery({ text: "from tRPC" });
  const contact = api.example.contact.useMutation();

  const onSubmit: SubmitHandler<ValidationSchema> = (data) => {
    contact.mutate({ email: data.email, message: data.message });
  };

  const onCopyEmail = async () => {
    setCopied(true);
    setTimeout(() => setCopied(false), 1000);
    await navigator.clipboard.writeText("scottnorris.work@gmail.com");
  };

  const {
    register,
    handleSubmit,
    formState: { errors },
  } = useForm<ValidationSchema>({
    resolver: zodResolver(validationSchema),
  });

  return (
    <>
      <Head>
        <title>Scott Norris</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <div className="bg-bg bg-contain bg-right bg-no-repeat">
          <div className="mx-auto flex min-h-screen max-w-6xl flex-row ">
            <div className="flex flex-col justify-center">
              <h1 className="mb-4 content-center font-Syne text-8xl font-medium">
                scott norris
              </h1>
              <p className="w-3/4 font-OpenSans text-xl">
                I take an holistic approach to full-stack development
                incorporating brand identity and design, prioritizing the
                user&apos;s experience.
              </p>
              <div className="mt-4 flex flex-row space-x-4">
                <button
                  onClick={() => scrollTo("projects")}
                  className="text-md border-1 rounded-lg border border-blue-600 px-5 py-3 font-OpenSans shadow-black/30 drop-shadow-md transition duration-300 ease-in-out hover:scale-105 hover:bg-indigo-400 hover:text-white"
                >
                  View Projects
                </button>
                <button
                  onClick={() => scrollTo("contact")}
                  className="text-md border-1 rounded-lg border border-blue-800 bg-blue-600 px-5 py-3 font-OpenSans text-white drop-shadow-md transition duration-100 ease-in-out hover:scale-105 hover:bg-indigo-400 "
                >
                  Contact Me
                </button>
              </div>
            </div>
            <div className="flex w-1/2 justify-center ">
              <Image
                className="object-contain"
                src={Avatar}
                alt="Avatar"
              ></Image>
            </div>
          </div>
        </div>
        <div id="projects" className="mx-auto mt-8 max-w-6xl">
          <h1 className="mb-4 content-center font-Syne text-7xl font-medium">
            projects
          </h1>
          <p className=" font-OpenSans text-xl font-medium">
            My current passion projects.
          </p>
          <div className="max-auto mt-4 flex h-full w-full justify-center space-x-4">
            {projects.map((item) => (
              <ProjectCard key={item.name} {...item} />
            ))}
          </div>
        </div>

        <div
          id="contact"
          className="mx-auto flex min-h-screen max-w-6xl flex-col justify-center"
        >
          <h1 className="mb-4 content-center font-Syne text-7xl font-medium">
            contact
          </h1>
          <p className="w-3/4 font-OpenSans text-xl"></p>
          <div className="grid grid-cols-2">
            {contact.data && (
              <div className="relative">
                <p className="mb-4 text-2xl">
                  Hey your message was sent. Also thanks for getting in contact,
                  i&apos;ll be in touch soon.
                </p>
                <Image
                  className="w-full"
                  alt="scooby"
                  src="/scooby.gif"
                  width={64}
                  height={64}
                ></Image>
              </div>
            )}
            {!contact.data && (
              <form
                className="flex flex-col"
                onSubmit={void handleSubmit((data) => onSubmit(data))}
              >
                <label
                  htmlFor="email"
                  className="mb-1 mt-2 font-OpenSans text-lg font-medium"
                >
                  Email
                </label>
                <input
                  className={`rounded-lg border border-blue-600 p-3 font-OpenSans text-lg focus:outline-none ${
                    errors.email ? "border-red-700" : ""
                  }`}
                  type="email"
                  placeholder="youremail@gmail.com"
                  id="email"
                  {...register("email")}
                ></input>
                {errors.email && (
                  <p className="font-OpenSans text-red-700">
                    {errors.email?.message}
                  </p>
                )}
                <label
                  htmlFor="message"
                  className="mb-1 mt-2 font-OpenSans text-lg font-medium"
                >
                  Message
                </label>
                <textarea
                  className={`resize-none rounded-lg border border-blue-600 p-2 font-OpenSans text-lg focus:outline-none ${
                    errors.message ? "border-red-700" : ""
                  }`}
                  id="message"
                  rows={8}
                  maxLength={400}
                  {...register("message")}
                ></textarea>
                <p className="font-OpenSans text-red-700">
                  {errors.message?.message}
                </p>
                <button className="text-md border-1 mt-2 rounded-md border border-blue-800 bg-blue-600 px-5 py-3 font-OpenSans text-white drop-shadow-md transition duration-100 ease-in-out hover:scale-105 hover:bg-indigo-400 ">
                  Send Email
                </button>
              </form>
            )}

            <div className="grid-rows-min grid h-full w-full grid-flow-row  place-content-center space-y-8">
              <Link
                href="https://github.com/lap-top"
                passHref={true}
                className="duration-220 flex w-fit  cursor-pointer flex-row space-x-4 rounded-lg p-2 transition ease-in-out hover:scale-105 hover:bg-blue-50"
              >
                <Image
                  src={"/icons/github.svg"}
                  width={48}
                  height={48}
                  alt="github"
                ></Image>
                <p className="my-auto text-2xl leading-none text-blue-600">
                  github.com/lap-top
                </p>
              </Link>
              <Link
                className="duration-220 flex w-fit cursor-pointer flex-row space-x-4 rounded-lg p-2 transition ease-in-out hover:scale-105 hover:bg-blue-50"
                href="https://linkedin.com/in/lap-top"
                passHref={true}
              >
                <Image
                  src={"/icons/linkedin.svg"}
                  width={48}
                  height={48}
                  alt="linkedin"
                ></Image>
                <p className="my-auto text-2xl leading-none text-blue-600 ">
                  linkedin.com/in/lap-top
                </p>
              </Link>
              <div
                onClick={void onCopyEmail}
                className="duration-220  flex cursor-pointer  flex-row space-x-4 rounded-lg p-2 transition ease-in-out hover:scale-105 hover:bg-blue-50"
              >
                <Image
                  src={"/icons/at.svg"}
                  width={48}
                  height={48}
                  alt="github"
                ></Image>
                <div className="relative my-auto text-2xl leading-none">
                  <p
                    className={`${
                      copied ? "text-transparent" : "text-blue-600"
                    }`}
                  >
                    scottnorris.work@gmail.com
                  </p>
                  {copied && (
                    <p className="absolute top-0">copied to clipboard</p>
                  )}
                </div>
              </div>
            </div>
          </div>
        </div>
      </main>
    </>
  );
};

export default Home;
